{"version":3,"sources":["Components/Todo.jsx","App.js","reportWebVitals.js","index.js"],"names":["Todo","todo","removeTask","toggleTask","className","isComplete","onClick","id","task","App","React","useState","userInput","setUserInput","todos","setTodos","filter","map","length","onSubmit","e","preventDefault","placeholder","onChange","currentTarget","value","newTask","Math","floor","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","path","document","getElementById"],"mappings":"qNAAaA,EAAO,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,WAEpC,OACI,sBAAmBC,UAAU,WAA7B,UACI,qBAAKA,UAAWH,EAAKI,WAAa,kBAAoB,OACjDC,QAAS,kBAAMH,EAAWF,EAAKM,KADpC,SAEKN,EAAKO,OAEV,qBAAKF,QAAS,kBAAMJ,EAAWD,EAAKM,KAAKH,UAAU,SAAnD,iBALMH,EAAKM,KC2DRE,EA3DH,WAER,MAAkCC,IAAMC,SAAS,IAAjD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BH,IAAMC,SAAS,IAAzC,mBAAOG,EAAP,KAAcC,EAAd,KAuBMb,EAAa,SAACK,GAChBQ,EAAS,YAAID,EAAME,QAAO,SAACf,GAAD,OAAUA,EAAKM,KAAOA,QAG9CJ,EAAa,SAACI,GAChBQ,EAAS,YAAID,EAAMG,KAAI,SAAChB,GAAD,OACvBA,EAAKM,KAAOA,EAAZ,2BAAqBN,GAArB,IAA2BI,YAAaJ,EAAKI,aAA7C,eAA+DJ,SAKnE,OACI,sBAAKG,UAAU,YAAf,UACI,uGAAmBU,EAAMI,UACzB,uBAAMC,SAnBO,SAACC,GAClBA,EAAEC,iBACFR,EAAa,KAiBT,UACI,uBACIS,YAAY,iGAAsBC,SAzB9B,SAACH,GACjBP,EAAaO,EAAEI,cAAcC,QAwBwCA,MAAOb,IAEpE,wBAAQN,QAtCJ,WACZ,GAAGM,EAAU,CACb,IAAMc,EAAU,CACZnB,GAAIoB,KAAKC,MAAoB,IAAdD,KAAKE,UACpBrB,KAAMI,EACNP,YAAY,GAEhBU,EAAS,GAAD,mBAAKD,GAAL,CAAYY,OA+BZ,uEAEHZ,EAAMG,KAAI,SAAChB,GACR,OAAO,gCAAK,uBAAK,cAAC,EAAD,CAGbA,KAAMA,EACNC,WAAYA,EACZC,WAAYA,GAHPF,EAAKM,UAKlB,8NC7CGuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACI,cAAC,IAAD,CAAOC,KAAK,IAAZ,SACI,cAAC,EAAD,UAIVC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.b75e7e53.chunk.js","sourcesContent":["export const Todo = ({todo, removeTask, toggleTask}) => {\r\n\r\n    return (\r\n        <div key={todo.id} className='todoList'>\r\n            <div className={todo.isComplete ? 'text-decoration' : 'text'}\r\n                 onClick={() => toggleTask(todo.id)}>\r\n                {todo.task}\r\n            </div>\r\n            <div onClick={() => removeTask(todo.id)} className='delete'>\r\n                X\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\nimport {Todo} from \"./Components/Todo\";\n\nconst App = () => {\n\n    const [userInput, setUserInput] = React.useState('')\n    const [todos, setTodos] = React.useState([])\n\n\n    const addTask = () => {\n        if(userInput){\n        const newTask = {\n            id: Math.floor(Math.random()*1000),\n            task: userInput,\n            isComplete: false\n        }\n        setTodos([...todos, newTask])\n    }}\n\n\n    const changeInput = (e) => {\n        setUserInput(e.currentTarget.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        setUserInput('')\n    }\n\n    const removeTask = (id) => {\n        setTodos([...todos.filter((todo) => todo.id !== id)])\n    }\n\n    const toggleTask = (id) => {\n        setTodos([...todos.map((todo) =>\n        todo.id === id ? {...todo, isComplete: !todo.isComplete} : {...todo}\n        )])\n    }\n\n\n    return (\n        <div className='container'>\n            <h1>Список задач: {todos.length}</h1>\n            <form onSubmit={handleSubmit}>\n                <input\n                    placeholder=\"Введите значение...\" onChange={changeInput} value={userInput} >\n                </input>\n                <button onClick={addTask}>Сохранить</button>\n            </form>\n            {todos.map((todo) => {\n                return <div><br/><Todo\n\n                    key={todo.id}\n                    todo={todo}\n                    removeTask={removeTask}\n                    toggleTask={toggleTask}/></div>\n            })}\n            <footer>Спасибо за просмотр моего проекта:)</footer>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter, Route} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n        <Route path='/'>\n            <App/>\n        </Route>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}